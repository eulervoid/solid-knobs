import { createEffect, createSignal, splitProps } from 'solid-js';
import { Control, ControlProps } from './Control';
import { rangeFunctions } from './range';

/**
 * @group Component Properties
 */
export interface ImageStripControlProps extends Omit<ControlProps, 'children'> {
  /**
   * The path to the image strip to use.
   */
  imageSrc: string,

  /**
   * The number of frames in the image strip.
   */
  numFrames: number,

  /**
   * Set to true if the image strip is laid out horizontally. Will be interpreted as vertical otherwise.
   */
  horizontal?: boolean
}

/**
 * Builds on top of the `Control` component, bringing easy-to-use support for image strip control graphics as generated by e.g. [KnobMan](https://www.g200kg.com/en/webknobman/gallery.php).
 * 
 * @group Components
 */
export function ImageStripControl(props: ImageStripControlProps) {
  const [imageSize, setImageSize] = createSignal({ width: 0, height: 0 });
  const [_, controlProps] = splitProps(props, ['numFrames', 'horizontal', 'imageSrc']);

  const normalisedValue = () => rangeFunctions.toNormalised(controlProps.range, controlProps.value);
  const frameSize = () => (props.horizontal ? imageSize().width : imageSize().height) / props.numFrames;
  const imageOffset = () => Math.round(normalisedValue() * (props.numFrames - 1)) * frameSize();

  const backgroundPosition = () => props.horizontal ? `${-imageOffset()}px 0` : `0 ${-imageOffset()}px`;
  const width = () => props.horizontal ? frameSize() : imageSize().width;
  const height = () => props.horizontal ? imageSize().height : frameSize();

  createEffect(() => {
    const img = new Image();
    img.onload = () => {
      setImageSize({ width: img.width, height: img.height });
    };
    img.src = props.imageSrc;
  });

  return (
    <Control
      {...controlProps}
      style={{
        'background-image': `url(${props.imageSrc})`,
        'background-repeat': 'no-repeat',
        'background-position': backgroundPosition(),
        'width': `${width()}px`,
        'height': `${height()}px`
      }}>
    </Control>
  );
}
